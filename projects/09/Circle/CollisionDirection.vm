function CollisionDirection.new 0
push constant 1
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push pointer 0
call CollisionDirection.collisionDirection 1
pop temp 0
push pointer 0
return
function CollisionDirection.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function CollisionDirection.collisionDirection 8
push argument 0
pop pointer 0
push this 0
call Circle.getCircleRight 1
pop local 6
push constant 0
pop local 7
push constant 64
push constant 0
call Array.new 2
pop local 1
push constant 64
push constant 200
call Array.new 2
pop local 2
push local 1
pop local 0
label WHILE_EXP0
push constant 1
push local 0
add
pop pointer 1
push that 0
push constant 1
push local 2
add
pop pointer 1
push that 0
eq
not
not
if-goto WHILE_END0
push local 0
push local 6
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
call Sys.halt 0
pop temp 0
label IF_FALSE0
push constant 1
push local 0
add
push constant 1
push local 0
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP0
label WHILE_END0
push local 6
call Memory.deAlloc 1
pop temp 0
push local 1
call Memory.deAlloc 1
pop temp 0
push local 2
call Memory.deAlloc 1
pop temp 0
push local 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
